apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.meizu.apptest"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 3
        versionName "2.5.3"
    }
    buildTypes {
        debug {
//            runProguard false
            proguardFile 'proguard-rules.txt'
            testCoverageEnabled = false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }



    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName = "3wApptest_v${defaultConfig.versionName}_${releaseTime()}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile files('libs/litepal-1.3.0.jar')
    //导入测试需要
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.robolectric:robolectric-annotations:3.0'
    testCompile "org.mockito:mockito-core:1.9.5"
    //robolectric针对support-v4的shadows
    testCompile "org.robolectric:shadows-support-v4:3.0" //如果使用support的Fragment，需添加以下依赖
    testCompile "com.jayway.awaitility:awaitility:1.7.0"
}
apply plugin: 'jacoco'
android.testOptions.unitTests.all {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'
    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

jacoco {
    toolVersion = "0.7.1.201405082137"  //0.7.6.201602180812(使用设个有问题，报错)   0.7.1.201405082137
    reportsDir = file("$buildDir/customJacocoReportDir")
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") { //使用test 也是可以的，不知区别
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')  //这个文件名需要查看app/build/jacoco 中的文件进行命名
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
